using System;

namespace BlackoutGuard.Models
{
    /// <summary>
    /// Represents an alert generated by the system in response to a threat, incident, or vulnerability
    /// </summary>
    public class Alert
    {
        // Unique identifier for the alert
        public Guid Id { get; private set; }
        
        // Title/subject of the alert
        public string Title { get; set; }
        
        // Detailed message of the alert
        public string Message { get; set; }
        
        // When the alert was generated
        public DateTime CreatedAt { get; private set; }
        
        // Priority level of the alert
        public AlertPriority Priority { get; set; }
        
        // Type/category of the alert
        public AlertType Type { get; set; }
        
        // Related entity ID (threat, incident, vulnerability, etc.)
        public Guid? RelatedEntityId { get; set; }
        
        // Type of the related entity
        public string RelatedEntityType { get; set; }
        
        // Detailed description of the alert
        public string Description { get; set; }
        
        // Source of the alert
        public string Source { get; set; }
        
        // Related incident ID
        public Guid? RelatedIncidentId { get; set; }
        
        // Related threat ID
        public Guid? RelatedThreatId { get; set; }
        
        // Whether the alert has been read
        public bool IsRead { get; set; }
        
        // When the alert was read (if applicable)
        public DateTime? ReadAt { get; set; }
        
        // User who read the alert (if applicable)
        public string ReadBy { get; set; }
        
        // Whether the alert has been acknowledged
        public bool IsAcknowledged { get; set; }
        
        // When the alert was acknowledged (if applicable)
        public DateTime? AcknowledgedAt { get; set; }
        
        // User who acknowledged the alert (if applicable)
        public string AcknowledgedBy { get; set; }
        
        // When the alert was triggered
        public DateTime TriggeredAt { get; set; }
        
        // Property for UI compatibility
        public bool Acknowledged => IsAcknowledged;
        
        // Related vulnerability ID
        public Guid? RelatedVulnerabilityId { get; set; }
        
        // Comments provided during acknowledgement
        public string AcknowledgementComments { get; set; }

        // Default constructor for deserialization
        public Alert()
        {
            Id = Guid.NewGuid();
            CreatedAt = DateTime.UtcNow;
            IsRead = false;
            IsAcknowledged = false;
        }

        // Constructor with required fields
        public Alert(string title, string message, AlertPriority priority, AlertType type)
        {
            Id = Guid.NewGuid();
            Title = title ?? throw new ArgumentNullException(nameof(title));
            Message = message ?? throw new ArgumentNullException(nameof(message));
            CreatedAt = DateTime.UtcNow;
            Priority = priority;
            Type = type;
            IsRead = false;
            IsAcknowledged = false;
        }

        // Constructor with related entity
        public Alert(string title, string message, AlertPriority priority, AlertType type, 
                     Guid relatedEntityId, string relatedEntityType)
            : this(title, message, priority, type)
        {
            RelatedEntityId = relatedEntityId;
            RelatedEntityType = relatedEntityType ?? throw new ArgumentNullException(nameof(relatedEntityType));
        }

        /// <summary>
        /// Marks the alert as read
        /// </summary>
        public void MarkAsRead(string readBy)
        {
            if (string.IsNullOrWhiteSpace(readBy))
                throw new ArgumentException("Reader cannot be empty", nameof(readBy));
                
            IsRead = true;
            ReadAt = DateTime.UtcNow;
            ReadBy = readBy;
        }

        /// <summary>
        /// Acknowledges the alert
        /// </summary>
        public void Acknowledge(string acknowledgedBy)
        {
            if (string.IsNullOrWhiteSpace(acknowledgedBy))
                throw new ArgumentException("Acknowledger cannot be empty", nameof(acknowledgedBy));
                
            IsAcknowledged = true;
            AcknowledgedAt = DateTime.UtcNow;
            AcknowledgedBy = acknowledgedBy;
            
            // Also mark as read if not already
            if (!IsRead)
            {
                MarkAsRead(acknowledgedBy);
            }
        }
    }

    /// <summary>
    /// Represents the priority level of an alert
    /// </summary>
    public enum AlertPriority
    {
        Low,       // Informational, no immediate action required
        Medium,    // Attention needed, but not urgent
        High,      // Urgent attention required
        Critical   // Immediate action required
    }

    /// <summary>
    /// Represents the category of an alert
    /// </summary>
    public enum AlertType
    {
        ThreatDetected,      // New security threat detected
        IncidentReported,    // New incident reported
        VulnerabilityFound,  // New vulnerability discovered
        SystemStatus,        // System status update
        MaintenanceRequired, // Maintenance needed
        PerformanceIssue,    // Performance degradation
        AnomalyDetected,     // Unusual behavior detected
        AuditFinding,        // Finding from security audit
        ComplianceIssue,     // Compliance violation
        SystemRecovery,      // System recovery event
        Security,            // Security-related alert
        Operational,         // Operational issue alert
        System,              // System-level alert
        Infrastructure,      // Infrastructure-related alert
        Environmental        // Environmental issue alert
    }
}
