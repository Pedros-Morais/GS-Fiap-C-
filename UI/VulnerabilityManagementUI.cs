using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using BlackoutGuard.Models;
using BlackoutGuard.Services;

namespace BlackoutGuard.UI
{
    /// <summary>
    /// Provides user interface for vulnerability management operations
    /// </summary>
    public class VulnerabilityManagementUI
    {
        private readonly VulnerabilityService _vulnerabilityService;
        private readonly LogService _logService;
        private readonly User _currentUser;
        
        public VulnerabilityManagementUI(VulnerabilityService vulnerabilityService, LogService logService, User currentUser)
        {
            _vulnerabilityService = vulnerabilityService ?? throw new ArgumentNullException(nameof(vulnerabilityService));
            _logService = logService ?? throw new ArgumentNullException(nameof(logService));
            _currentUser = currentUser ?? throw new ArgumentNullException(nameof(currentUser));
        }
        
        /// <summary>
        /// Shows the vulnerability management menu
        /// </summary>
        public async Task ShowMenuAsync()
        {
            while (true)
            {
                Console.Clear();
                ConsoleHelper.DisplayHeader("VULNERABILITY MANAGEMENT");
                
                Console.WriteLine("1. View All Vulnerabilities");
                Console.WriteLine("2. View Open Vulnerabilities");
                Console.WriteLine("3. View High Severity Vulnerabilities");
                Console.WriteLine("4. Register New Vulnerability");
                Console.WriteLine("5. Update Vulnerability Status");
                Console.WriteLine("6. Add Action to Vulnerability");
                Console.WriteLine("7. Update CVSS Score");
                Console.WriteLine("8. Mark as Patched");
                Console.WriteLine("9. Perform Vulnerability Scan");
                Console.WriteLine("10. View Vulnerability Details");
                Console.WriteLine("11. Return to Main Menu");
                
                Console.Write("\nSelect an option: ");
                string? choice = Console.ReadLine();
                
                switch (choice)
                {
                    case "1":
                        await ViewAllVulnerabilitiesAsync();
                        break;
                        
                    case "2":
                        await ViewOpenVulnerabilitiesAsync();
                        break;
                        
                    case "3":
                        await ViewHighSeverityVulnerabilitiesAsync();
                        break;
                        
                    case "4":
                        await RegisterNewVulnerabilityAsync();
                        break;
                        
                    case "5":
                        await UpdateVulnerabilityStatusAsync();
                        break;
                        
                    case "6":
                        await AddActionToVulnerabilityAsync();
                        break;
                        
                    case "7":
                        await UpdateCvssScoreAsync();
                        break;
                        
                    case "8":
                        await MarkVulnerabilityAsPatchedAsync();
                        break;
                        
                    case "9":
                        await PerformVulnerabilityScanAsync();
                        break;
                        
                    case "10":
                        await ViewVulnerabilityDetailsAsync();
                        break;
                        
                    case "11":
                        return;
                        
                    default:
                        ConsoleHelper.DisplayError("Invalid option. Please try again.");
                        ConsoleHelper.WaitForKeyPress();
                        break;
                }
            }
        }
        
        /// <summary>
        /// Views all vulnerabilities
        /// </summary>
        private async Task ViewAllVulnerabilitiesAsync()
        {
            try
            {
                Console.Clear();
                ConsoleHelper.DisplayHeader("ALL VULNERABILITIES");
                
                var vulnerabilities = await _vulnerabilityService.GetAllVulnerabilitiesAsync();
                
                if (vulnerabilities.Count == 0)
                {
                    ConsoleHelper.DisplayInfo("No vulnerabilities found.");
                }
                else
                {
                    string[] headers = { "ID", "Name", "Severity", "Type", "Status", "Affected System", "CVSS" };
                    
                    ConsoleHelper.DisplayTable(vulnerabilities, headers, vulnerability => new string[]
                    {
                        vulnerability.Id.ToString().Substring(0, 8),
                        vulnerability.Name,
                        vulnerability.Severity.ToString(),
                        vulnerability.Type.ToString(),
                        vulnerability.Status.ToString(),
                        vulnerability.AffectedSystem,
                        vulnerability.CvssScore.ToString("0.0")
                    });
                }
                
                ConsoleHelper.WaitForKeyPress();
            }
            catch (Exception ex)
            {
                ConsoleHelper.DisplayError($"Error viewing vulnerabilities: {ex.Message}");
                _logService.LogError($"Error viewing vulnerabilities: {ex.Message}");
                ConsoleHelper.WaitForKeyPress();
            }
        }
        
        /// <summary>
        /// Views open vulnerabilities
        /// </summary>
        private async Task ViewOpenVulnerabilitiesAsync()
        {
            try
            {
                Console.Clear();
                ConsoleHelper.DisplayHeader("OPEN VULNERABILITIES");
                
                var vulnerabilities = await _vulnerabilityService.GetOpenVulnerabilitiesAsync();
                
                if (vulnerabilities.Count == 0)
                {
                    ConsoleHelper.DisplayInfo("No open vulnerabilities found.");
                }
                else
                {
                    string[] headers = { "ID", "Name", "Severity", "Type", "Status", "Affected System", "CVSS" };
                    
                    ConsoleHelper.DisplayTable(vulnerabilities, headers, vulnerability => new string[]
                    {
                        vulnerability.Id.ToString().Substring(0, 8),
                        vulnerability.Name,
                        vulnerability.Severity.ToString(),
                        vulnerability.Type.ToString(),
                        vulnerability.Status.ToString(),
                        vulnerability.AffectedSystem,
                        vulnerability.CvssScore.ToString("0.0")
                    });
                }
                
                ConsoleHelper.WaitForKeyPress();
            }
            catch (Exception ex)
            {
                ConsoleHelper.DisplayError($"Error viewing open vulnerabilities: {ex.Message}");
                _logService.LogError($"Error viewing open vulnerabilities: {ex.Message}");
                ConsoleHelper.WaitForKeyPress();
            }
        }
        
        /// <summary>
        /// Views high severity vulnerabilities
        /// </summary>
        private async Task ViewHighSeverityVulnerabilitiesAsync()
        {
            try
            {
                Console.Clear();
                ConsoleHelper.DisplayHeader("HIGH SEVERITY VULNERABILITIES");
                
                var vulnerabilities = await _vulnerabilityService.GetHighSeverityVulnerabilitiesAsync();
                
                if (vulnerabilities.Count == 0)
                {
                    ConsoleHelper.DisplayInfo("No high severity vulnerabilities found.");
                }
                else
                {
                    string[] headers = { "ID", "Name", "Severity", "Type", "Status", "Affected System", "CVSS" };
                    
                    ConsoleHelper.DisplayTable(vulnerabilities, headers, vulnerability => new string[]
                    {
                        vulnerability.Id.ToString().Substring(0, 8),
                        vulnerability.Name,
                        vulnerability.Severity.ToString(),
                        vulnerability.Type.ToString(),
                        vulnerability.Status.ToString(),
                        vulnerability.AffectedSystem,
                        vulnerability.CvssScore.ToString("0.0")
                    });
                }
                
                ConsoleHelper.WaitForKeyPress();
            }
            catch (Exception ex)
            {
                ConsoleHelper.DisplayError($"Error viewing high severity vulnerabilities: {ex.Message}");
                _logService.LogError($"Error viewing high severity vulnerabilities: {ex.Message}");
                ConsoleHelper.WaitForKeyPress();
            }
        }
        
        /// <summary>
        /// Registers a new vulnerability
        /// </summary>
        private async Task RegisterNewVulnerabilityAsync()
        {
            Console.Clear();
            ConsoleHelper.DisplayHeader("REGISTER NEW VULNERABILITY");
            
            try
            {
                Console.Write("Name: ");
                string? name = Console.ReadLine();
                
                Console.Write("Description: ");
                string? description = Console.ReadLine();
                
                Console.Write("Affected System: ");
                string? affectedSystem = Console.ReadLine();
                
                Console.WriteLine("\nSeverity:");
                Console.WriteLine("1. Low");
                Console.WriteLine("2. Medium");
                Console.WriteLine("3. High");
                Console.WriteLine("4. Critical");
                Console.Write("Select severity: ");
                string? severityChoice = Console.ReadLine();
                
                VulnerabilitySeverity severity = severityChoice switch
                {
                    "1" => VulnerabilitySeverity.Low,
                    "2" => VulnerabilitySeverity.Medium,
                    "3" => VulnerabilitySeverity.High,
                    "4" => VulnerabilitySeverity.Critical,
                    _ => VulnerabilitySeverity.Medium // Default
                };
                
                Console.WriteLine("\nVulnerability Type:");
                Console.WriteLine("1. Authentication");
                Console.WriteLine("2. Authorization");
                Console.WriteLine("3. Cryptographic");
                Console.WriteLine("4. InputValidation");
                Console.WriteLine("5. Configuration");
                Console.WriteLine("6. LoggingMonitoring");
                Console.WriteLine("7. NetworkSecurity");
                Console.WriteLine("8. PhysicalSecurity");
                Console.WriteLine("9. Firmware");
                Console.WriteLine("10. Software");
                Console.WriteLine("11. Hardware");
                Console.Write("Select type: ");
                string? typeChoice = Console.ReadLine();
                
                VulnerabilityType type = typeChoice switch
                {
                    "1" => VulnerabilityType.Authentication,
                    "2" => VulnerabilityType.Authorization,
                    "3" => VulnerabilityType.Cryptographic,
                    "4" => VulnerabilityType.InputValidation,
                    "5" => VulnerabilityType.Configuration,
                    "6" => VulnerabilityType.LoggingMonitoring,
                    "7" => VulnerabilityType.NetworkSecurity,
                    "8" => VulnerabilityType.PhysicalSecurity,
                    "9" => VulnerabilityType.Firmware,
                    "10" => VulnerabilityType.Software,
                    "11" => VulnerabilityType.Hardware,
                    _ => VulnerabilityType.Software // Default
                };
                
                if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(description) || string.IsNullOrWhiteSpace(affectedSystem))
                {
                    ConsoleHelper.DisplayError("Name, description, and affected system are required.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                Vulnerability vulnerability = await _vulnerabilityService.CreateVulnerabilityAsync(
                    name, description, severity, type, affectedSystem, _currentUser.Username);
                
                ConsoleHelper.DisplaySuccess($"Vulnerability '{vulnerability.Name}' registered successfully with ID: {vulnerability.Id}");
                _logService.LogSecurity($"New vulnerability registered: {vulnerability.Name} by {_currentUser.Username}");
                
                ConsoleHelper.WaitForKeyPress();
            }
            catch (Exception ex)
            {
                ConsoleHelper.DisplayError($"Error registering vulnerability: {ex.Message}");
                _logService.LogError($"Error registering vulnerability: {ex.Message}");
                ConsoleHelper.WaitForKeyPress();
            }
        }
        
        /// <summary>
        /// Updates a vulnerability's status
        /// </summary>
        private async Task UpdateVulnerabilityStatusAsync()
        {
            Console.Clear();
            ConsoleHelper.DisplayHeader("UPDATE VULNERABILITY STATUS");
            
            try
            {
                Console.Write("Enter vulnerability ID: ");
                string? idInput = Console.ReadLine();
                
                if (string.IsNullOrWhiteSpace(idInput) || !Guid.TryParse(idInput, out Guid id))
                {
                    ConsoleHelper.DisplayError("Invalid vulnerability ID.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                var vulnerability = await _vulnerabilityService.GetVulnerabilityByIdAsync(id);
                
                if (vulnerability == null)
                {
                    ConsoleHelper.DisplayError($"Vulnerability with ID {id} not found.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                Console.WriteLine($"\nCurrent Status: {vulnerability.Status}");
                Console.WriteLine("\nNew Status:");
                Console.WriteLine("1. Open");
                Console.WriteLine("2. InProgress");
                Console.WriteLine("3. Mitigated");
                Console.WriteLine("4. Patched");
                Console.WriteLine("5. FalsePositive");
                Console.Write("Select new status: ");
                string? statusChoice = Console.ReadLine();
                
                VulnerabilityStatus newStatus = statusChoice switch
                {
                    "1" => VulnerabilityStatus.Open,
                    "2" => VulnerabilityStatus.InProgress,
                    "3" => VulnerabilityStatus.Mitigated,
                    "4" => VulnerabilityStatus.Patched,
                    "5" => VulnerabilityStatus.FalsePositive,
                    _ => vulnerability.Status // No change
                };
                
                if (newStatus == vulnerability.Status)
                {
                    ConsoleHelper.DisplayInfo("Status not changed.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                await _vulnerabilityService.UpdateVulnerabilityStatusAsync(id, newStatus, _currentUser.Username);
                
                ConsoleHelper.DisplaySuccess($"Vulnerability status updated to {newStatus}.");
                _logService.LogInfo($"Vulnerability {vulnerability.Name} status updated from {vulnerability.Status} to {newStatus} by {_currentUser.Username}");
                
                ConsoleHelper.WaitForKeyPress();
            }
            catch (Exception ex)
            {
                ConsoleHelper.DisplayError($"Error updating vulnerability status: {ex.Message}");
                _logService.LogError($"Error updating vulnerability status: {ex.Message}");
                ConsoleHelper.WaitForKeyPress();
            }
        }
        
        /// <summary>
        /// Adds an action to a vulnerability
        /// </summary>
        private async Task AddActionToVulnerabilityAsync()
        {
            Console.Clear();
            ConsoleHelper.DisplayHeader("ADD ACTION TO VULNERABILITY");
            
            try
            {
                Console.Write("Enter vulnerability ID: ");
                string? idInput = Console.ReadLine();
                
                if (string.IsNullOrWhiteSpace(idInput) || !Guid.TryParse(idInput, out Guid id))
                {
                    ConsoleHelper.DisplayError("Invalid vulnerability ID.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                var vulnerability = await _vulnerabilityService.GetVulnerabilityByIdAsync(id);
                
                if (vulnerability == null)
                {
                    ConsoleHelper.DisplayError($"Vulnerability with ID {id} not found.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                Console.WriteLine($"\nVulnerability: {vulnerability.Name}");
                Console.WriteLine($"Status: {vulnerability.Status}");
                
                Console.Write("\nAction description: ");
                string? actionDescription = Console.ReadLine();
                
                if (string.IsNullOrWhiteSpace(actionDescription))
                {
                    ConsoleHelper.DisplayError("Action description is required.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                await _vulnerabilityService.AddVulnerabilityActionAsync(id, actionDescription, _currentUser.Username);
                
                ConsoleHelper.DisplaySuccess("Action added successfully.");
                _logService.LogInfo($"Action added to vulnerability {vulnerability.Name} by {_currentUser.Username}: {actionDescription}");
                
                ConsoleHelper.WaitForKeyPress();
            }
            catch (Exception ex)
            {
                ConsoleHelper.DisplayError($"Error adding action: {ex.Message}");
                _logService.LogError($"Error adding action to vulnerability: {ex.Message}");
                ConsoleHelper.WaitForKeyPress();
            }
        }
        
        /// <summary>
        /// Updates CVSS score for a vulnerability
        /// </summary>
        private async Task UpdateCvssScoreAsync()
        {
            Console.Clear();
            ConsoleHelper.DisplayHeader("UPDATE CVSS SCORE");
            
            try
            {
                Console.Write("Enter vulnerability ID: ");
                string? idInput = Console.ReadLine();
                
                if (string.IsNullOrWhiteSpace(idInput) || !Guid.TryParse(idInput, out Guid id))
                {
                    ConsoleHelper.DisplayError("Invalid vulnerability ID.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                var vulnerability = await _vulnerabilityService.GetVulnerabilityByIdAsync(id);
                
                if (vulnerability == null)
                {
                    ConsoleHelper.DisplayError($"Vulnerability with ID {id} not found.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                Console.WriteLine($"\nVulnerability: {vulnerability.Name}");
                Console.WriteLine($"Current CVSS Score: {vulnerability.CvssScore}");
                Console.WriteLine($"Current CVE ID: {(string.IsNullOrEmpty(vulnerability.CveId) ? "None" : vulnerability.CveId)}");
                
                Console.Write("\nNew CVSS Score (0-10): ");
                string? cvssInput = Console.ReadLine();
                
                if (!double.TryParse(cvssInput, out double cvssScore) || cvssScore < 0 || cvssScore > 10)
                {
                    ConsoleHelper.DisplayError("CVSS score must be a number between 0 and 10.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                Console.Write("CVE ID (optional): ");
                string? cveId = Console.ReadLine();
                
                await _vulnerabilityService.UpdateCvssScoreAsync(id, cvssScore, cveId ?? "", _currentUser.Username);
                
                ConsoleHelper.DisplaySuccess($"CVSS score updated to {cvssScore}.");
                _logService.LogInfo($"Vulnerability {vulnerability.Name} CVSS score updated to {cvssScore} by {_currentUser.Username}");
                
                ConsoleHelper.WaitForKeyPress();
            }
            catch (Exception ex)
            {
                ConsoleHelper.DisplayError($"Error updating CVSS score: {ex.Message}");
                _logService.LogError($"Error updating CVSS score: {ex.Message}");
                ConsoleHelper.WaitForKeyPress();
            }
        }
        
        /// <summary>
        /// Marks a vulnerability as patched
        /// </summary>
        private async Task MarkVulnerabilityAsPatchedAsync()
        {
            Console.Clear();
            ConsoleHelper.DisplayHeader("MARK VULNERABILITY AS PATCHED");
            
            try
            {
                Console.Write("Enter vulnerability ID: ");
                string? idInput = Console.ReadLine();
                
                if (string.IsNullOrWhiteSpace(idInput) || !Guid.TryParse(idInput, out Guid id))
                {
                    ConsoleHelper.DisplayError("Invalid vulnerability ID.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                var vulnerability = await _vulnerabilityService.GetVulnerabilityByIdAsync(id);
                
                if (vulnerability == null)
                {
                    ConsoleHelper.DisplayError($"Vulnerability with ID {id} not found.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                if (vulnerability.Status == VulnerabilityStatus.Patched)
                {
                    ConsoleHelper.DisplayError("Vulnerability is already marked as patched.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                Console.WriteLine($"\nVulnerability: {vulnerability.Name}");
                Console.WriteLine($"Status: {vulnerability.Status}");
                
                Console.Write("\nRemediation details: ");
                string? remediationDetails = Console.ReadLine();
                
                if (string.IsNullOrWhiteSpace(remediationDetails))
                {
                    ConsoleHelper.DisplayError("Remediation details are required.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                await _vulnerabilityService.PatchVulnerabilityAsync(id, _currentUser.Username, remediationDetails);
                
                ConsoleHelper.DisplaySuccess("Vulnerability marked as patched successfully.");
                _logService.LogInfo($"Vulnerability {vulnerability.Name} marked as patched by {_currentUser.Username}");
                
                ConsoleHelper.WaitForKeyPress();
            }
            catch (Exception ex)
            {
                ConsoleHelper.DisplayError($"Error patching vulnerability: {ex.Message}");
                _logService.LogError($"Error patching vulnerability: {ex.Message}");
                ConsoleHelper.WaitForKeyPress();
            }
        }
        
        /// <summary>
        /// Performs a vulnerability scan
        /// </summary>
        private async Task PerformVulnerabilityScanAsync()
        {
            Console.Clear();
            ConsoleHelper.DisplayHeader("PERFORM VULNERABILITY SCAN");
            
            try
            {
                Console.Write("System to scan: ");
                string? system = Console.ReadLine();
                
                if (string.IsNullOrWhiteSpace(system))
                {
                    ConsoleHelper.DisplayError("System name is required.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                ConsoleHelper.DisplayInfo($"Starting vulnerability scan on {system}...");
                Console.WriteLine("This may take a few moments.");
                
                var vulnerabilities = await _vulnerabilityService.PerformVulnerabilityScanAsync(system, _currentUser.Username);
                
                Console.Clear();
                ConsoleHelper.DisplayHeader("VULNERABILITY SCAN RESULTS");
                
                Console.WriteLine($"System: {system}");
                Console.WriteLine($"Scan performed by: {_currentUser.Username}");
                Console.WriteLine($"Vulnerabilities found: {vulnerabilities.Count}");
                
                if (vulnerabilities.Count > 0)
                {
                    Console.WriteLine("\nVulnerabilities:");
                    string[] headers = { "ID", "Name", "Severity", "Type" };
                    
                    ConsoleHelper.DisplayTable(vulnerabilities, headers, vulnerability => new string[]
                    {
                        vulnerability.Id.ToString().Substring(0, 8),
                        vulnerability.Name,
                        vulnerability.Severity.ToString(),
                        vulnerability.Type.ToString()
                    });
                }
                
                ConsoleHelper.DisplaySuccess("Scan completed successfully.");
                _logService.LogInfo($"Vulnerability scan completed on {system} by {_currentUser.Username}. Found {vulnerabilities.Count} vulnerabilities.");
                
                ConsoleHelper.WaitForKeyPress();
            }
            catch (Exception ex)
            {
                ConsoleHelper.DisplayError($"Error performing vulnerability scan: {ex.Message}");
                _logService.LogError($"Error performing vulnerability scan: {ex.Message}");
                ConsoleHelper.WaitForKeyPress();
            }
        }
        
        /// <summary>
        /// Views detailed information about a vulnerability
        /// </summary>
        private async Task ViewVulnerabilityDetailsAsync()
        {
            Console.Clear();
            ConsoleHelper.DisplayHeader("VULNERABILITY DETAILS");
            
            try
            {
                Console.Write("Enter vulnerability ID: ");
                string? idInput = Console.ReadLine();
                
                if (string.IsNullOrWhiteSpace(idInput) || !Guid.TryParse(idInput, out Guid id))
                {
                    ConsoleHelper.DisplayError("Invalid vulnerability ID.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                var vulnerability = await _vulnerabilityService.GetVulnerabilityByIdAsync(id);
                
                if (vulnerability == null)
                {
                    ConsoleHelper.DisplayError($"Vulnerability with ID {id} not found.");
                    ConsoleHelper.WaitForKeyPress();
                    return;
                }
                
                Console.Clear();
                ConsoleHelper.DisplayHeader($"VULNERABILITY: {vulnerability.Name}");
                
                Console.WriteLine($"ID: {vulnerability.Id}");
                Console.WriteLine($"Name: {vulnerability.Name}");
                Console.WriteLine($"Description: {vulnerability.Description}");
                Console.WriteLine($"Severity: {vulnerability.Severity}");
                Console.WriteLine($"Type: {vulnerability.Type}");
                Console.WriteLine($"Status: {vulnerability.Status}");
                Console.WriteLine($"Affected System: {vulnerability.AffectedSystem}");
                Console.WriteLine($"CVSS Score: {vulnerability.CvssScore}");
                
                if (!string.IsNullOrWhiteSpace(vulnerability.CveId))
                {
                    Console.WriteLine($"CVE ID: {vulnerability.CveId}");
                }
                
                Console.WriteLine($"Discovered At: {vulnerability.DiscoveredAt}");
                Console.WriteLine($"Discovered By: {vulnerability.DiscoveredBy}");
                
                if (vulnerability.PatchedAt.HasValue)
                {
                    Console.WriteLine($"Patched At: {vulnerability.PatchedAt}");
                    Console.WriteLine($"Patched By: {vulnerability.PatchedBy}");
                }
                
                if (!string.IsNullOrWhiteSpace(vulnerability.RemediationSteps))
                {
                    Console.WriteLine("\nRemediation Steps:");
                    Console.WriteLine(vulnerability.RemediationSteps);
                }
                
                Console.WriteLine("\nAction History:");
                if (vulnerability.Actions.Count == 0)
                {
                    Console.WriteLine("No actions recorded.");
                }
                else
                {
                    foreach (var action in vulnerability.Actions)
                    {
                        Console.WriteLine($"[{action.Timestamp}] {action.Description} (by {action.PerformedBy})");
                    }
                }
                
                ConsoleHelper.WaitForKeyPress();
            }
            catch (Exception ex)
            {
                ConsoleHelper.DisplayError($"Error viewing vulnerability details: {ex.Message}");
                _logService.LogError($"Error viewing vulnerability details: {ex.Message}");
                ConsoleHelper.WaitForKeyPress();
            }
        }
    }
}
